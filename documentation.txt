#######################################################################################################

#Synteny and Function
#Written by: Preston Basting
#Email:pjb68507@uga.edu
#Lab: Jan Mrazek
#Purpose: This is a pipeline designed to determine orthologous genes that have moved when comparing
		  related species translated sequence, ideally, proteins that have moved from a conserved
		  region into another conserved region in the genome. These are then related to KEGG functional
		  classifications to see if certain functional groups of proteins are more likely to move than
		  others. 

#######################################################################################################





##################
### HOW TO USE ###
##################

1. All scripts and C++ source code should be in the same directory
2. A subdirectory must be made called 'fastas'
3. Inside 'fastas' there should be a directory for each group you want to run together (e.g. a genus)
	a. The directory should be named after the grouping (e.g. genus campylobacter directory named 'campylobacter')
4. Inside the group directory there should be directories for each individual organisms
	a. each organism directory must contain (1) protein .fasta (2) genbank(full) .gb (3) kegg ontology File .keg
	b. the name of the organism directory must start with the first letter of the grouping directory and an underscore (c_)
	
## File Structure Example##

Projectdir/
	run_genus.sh
	synteny.sh
	runblast.sh
	CompareOrthologs.cpp
	makeSyntenyPlot.r
	getKegResults.cpp
	FormatKegResults.cpp
	genPosionValues.r
	ConstructBrKegg.py
	BuildAllBrKegg.sh
	fastas/
		campylobacter/
			c_jejuni/
				c_jejuni.fasta
				c_jejuni.gb
				c_jejuni.keg
			c_coli/
				c_coli.fasta
				c_coli.gb
				c_coli.keg

5. once the directories are ordered like the example above, you can construct the .brkeg files using 'BuildAllBrKegg.sh'
	a. this constructs a file that will be used by downstream programs to determine functional categories
	b. it combines the information form a kegg orthology file (.keg) and a BRITE file into a .brkeg file
6. run the 'run_genus.sh' with the name of the grouping directory as the only argument
	a. example: ./run_genus.sh campylobacter
		I. this will run all comparisons of organisms found within the campylobacter directory


##########################
### WHERE TO GET FILES ###
##########################

## KEGG, GENBANK AND FASTA ##

www.genome.jp/kegg-bin/show_organism?category=Bacteria

1. select organism that you wish to download sequence files for
2. Open link next to 'Sequence' under 'Chromosome' for the genbank information in new tab
	a. this link should take you to NCBI
3. click 'send to:' at the top right of the page
4. select 'Coding Sequences' then Format: 'FASTA Protein'
	a. save with .fasta file extension
5. Click 'Send to:' again and select 'Complete Record' 'File' Format:'GenBank(full)'
	a. save with .gb file extension
6. Return to the organism page on genome.jp
7. click Brite hierarchy' at the top
8. click 'KEGG orthology (KO)' at the top of the list
9. Click 'download htext' at the top of the page
	a. save with the .keg file extension
	
	
############################
### INTERPRETING RESULTS ###
############################

Final results will be found in the group directory under 'synteny_results'

*_movedProteins.txt raw concatenated results for the entire group. Duplicates have not been removed

*_formatted_movedProteins.csv is a table of total counts for each functional grouping by each movement classification

*_poission.csv table of expected and actual counts for each category as well as p values for each datapoint

*_Summary_Table.csv is an attempt to summarize the results from *_poission.csv.
	It is a table of categories with + or - if the results were significant
	+/- = pval < 0.05; ++/-- = pval < 0.001; 


#####################################
### MOVEMENT CATEGORY DEFINITIONS ###
#####################################
	
UNMOVED/MOVED
	RANGE_CUTOFF = 5 positions
	CHECK_RANGE = 5 upstream/downstream orthologous gene positions
	NEARBY_PROTEIN_CUTOFF = 0.3
	
	counts nearby (RANGE_CUTOFF in both directions) orthologous genes that are conserved (close to the same position as the query gene)
	if the rate of nearby conserved genes is less than the NEARBY_PROTEIN_CUTOFF then the gene is classified as moved
	else the  gene is unmoved
	increasing NEARBY_PROTEIN_CUTOFF increases the number of genes classified as moved
	
UNCONSERVED/CONSERVED
	
	take nearby (RANGE_CUTOFF in both directions) orthologous genes and compares them to all regions in the opposite genome. Each match is counted. 
	If the rate of nearby conserved genes is greater than 1-(NEARBY_PROTEIN_CUTOFF) then the region is considered to be conserved


	
 
